x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.3}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    #AIRFLOW__CORE__AUTH_MANAGER: airflow.www.security.DefaultAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    #- ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  command: bash -c "pip install neo4j && airflow webserver"
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ../data/output:/opt/airflow/data/raw
      - ../data/clean_dag:/opt/airflow/data/clean
      - ./config:/opt/airflow/config
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      #- ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ../data/output:/opt/airflow/data/raw
      - ../data/clean_dag:/opt/airflow/data/clean

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      #- ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ../data/output:/opt/airflow/data/raw
      - ../data/clean_dag:/opt/airflow/data/clean
  
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      #- ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ../data/output:/opt/airflow/data/raw
      - ../data/clean_dag:/opt/airflow/data/clean

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ../data/output:/opt/airflow/data/raw
      - ../data/clean_dag:/opt/airflow/data/clean
      - ./config:/opt/airflow/config
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/{logs,dags,plugins,config}
        echo "Initializing Airflow DB and configs..."
        if [[ -z "${AIRFLOW_UID}" ]]; then export AIRFLOW_UID=$(id -u); fi
        echo "Setting file ownership for UID: $AIRFLOW_UID"
        chown -R "${AIRFLOW_UID}:0" /opt/airflow
        airflow db migrate
        airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      #- ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
      - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR:-.}/scripts:/opt/airflow/scripts
    restart: "no"
  airflow-webserver:
    image: apache/airflow:2.7.3
    restart: always
    depends_on:
      - postgres
      - redis
    ports:
      - "8080:8080"
    command: webserver
    environment:
      <<: *airflow-common-env
    
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      #- ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ../data/output:/opt/airflow/data/raw
      - ../data/clean_dag:/opt/airflow/data/clean


volumes:
  postgres-db-volume:
